PROGRAM  ->  STATEMENT  
PROGRAM  ->  FUNCLIST PROGRAM'
PROGRAM  ->  ''
PROGRAM' ->  STATEMENT
PROGRAM' ->  ''
FUNCLIST  ->  FUNCDEF FUNCLIST'
FUNCLIST' ->  FUNCLIST
FUNCLIST' ->  ''
FUNCDEF  ->  def ident ( PARAMLIST ) { STATELIST }
PARAMLIST  ->  int ident PARAMLIST'
PARAMLIST  ->  float ident PARAMLIST'
PARAMLIST  ->  string ident PARAMLIST'
PARAMLIST  ->  ''
PARAMLIST' ->  , PARAMLIST
PARAMLIST' ->  ''
STATEMENT  ->  VARDECL ;  
STATEMENT  ->  ATRIBSTAT ;  
STATEMENT  ->  PRINTSTAT ;  
STATEMENT  ->  READSTAT ;  
STATEMENT  ->  RETURNSTAT ;  
STATEMENT  ->  IFSTAT  
STATEMENT  ->  FORSTAT  
STATEMENT  ->  { STATELIST }  
STATEMENT  ->  break ;  
STATEMENT  ->  ;
INDEX  ->  [ int_constant ] INDEX
INDEX  ->  ''
VARDECL  ->  int ident INDEX  
VARDECL  ->  float ident INDEX  
VARDECL  ->  string ident INDEX
ATRIBSTAT  ->  LVALUE = ATRIBSTAT'
ATRIBSTAT' ->  EXPRESSION
ATRIBSTAT' ->  ALLOCEXPRESSION
ATRIBSTAT' ->  FUNCCALL
FUNCCALL  ->  call ( ident ( PARAMLISTCALL ) )
PARAMLISTCALL  -> ident PARAMLISTCALL'
PARAMLISTCALL  -> ''
PARAMLISTCALL' -> , PARAMLISTCALL
PARAMLISTCALL' -> ''
PRINTSTAT  ->  print EXPRESSION
READSTAT  ->  read LVALUE
RETURNSTAT  ->  return RETURNSTAT'
RETURNSTAT' ->  LVALUE
RETURNSTAT' ->  ''
IFSTAT  -> if ( EXPRESSION ) { STATEMENT } IFSTAT'
IFSTAT' -> else { STATEMENT }
IFSTAT' -> ''
FORSTAT  ->  for ( ATRIBSTAT ; EXPRESSION ; ATRIBSTAT ) STATEMENT
STATELIST  -> STATEMENT STATELIST'
STATELIST' -> STATELIST
STATELIST' -> ''
ALLOCAUX  ->  [ NUMEXPRESSION ] ALLOCAUX  
ALLOCAUX  ->  ''
ALLOCEXPRESSION  -> new ALLOCEXPRESSION'
ALLOCEXPRESSION' -> int [ NUMEXPRESSION ] ALLOCAUX 
ALLOCEXPRESSION' -> float [ NUMEXPRESSION ] ALLOCAUX 
ALLOCEXPRESSION' -> string [ NUMEXPRESSION ] ALLOCAUX 
EXPRESSION  ->  NUMEXPRESSION EXPRESSION'
EXPRESSION' ->  relop NUMEXPRESSION
EXPRESSION' ->  ''
NUMEXPRESSIONAUX  ->  + NUMEXPRESSION  
NUMEXPRESSIONAUX  ->  - NUMEXPRESSION
NUMEXPRESSIONAUX  ->  ''
NUMEXPRESSION  ->  TERM NUMEXPRESSIONAUX
TERM  ->  UNARYEXPR UNARYEXPRAUX
UNARYEXPRAUX  ->  * TERM  
UNARYEXPRAUX  ->  / TERM  
UNARYEXPRAUX  ->  % TERM
UNARYEXPRAUX  ->  ''
UNARYEXPR  ->  + FACTOR  
UNARYEXPR  ->  - FACTOR  
UNARYEXPR  ->  FACTOR
FACTOR  ->  int_constant  
FACTOR  ->  float_constant  
FACTOR  ->  string_constant  
FACTOR  ->  null  
FACTOR  ->  LVALUE  
FACTOR  ->  ( NUMEXPRESSION )
LVALUE  ->  ident ALLOCAUX 

# ALTERAÇÕES NA GRAMATICA BASE:

# Adicionada a possibilidade de inserir statements após a definição de funções
PROGRAM  ->  FUNCLIST PROGRAM'
PROGRAM' ->  STATEMENT
PROGRAM' ->  ''

# Adicionado {} em torno de STATEMENT para desambiguar a gramática
IFSTAT  -> if ( EXPRESSION ) { STATELIST } IFSTAT'
IFSTAT' -> else { STATELIST }
IFSTAT' -> ''

# Adicionado capacidade de retornar lvalues nas funções
RETURNSTAT  ->  return RETURNSTAT'
RETURNSTAT' ->  LVALUE
RETURNSTAT' ->  ''

# Adicionada a palavra reservada call para chamar funções
FUNCCALL  ->  call ( ident ( PARAMLISTCALL ) )

# O token relop pode assumir os valores: >, <, >=, <=, == ou !=
EXPRESSION  ->  NUMEXPRESSION relop NUMEXPRESSION