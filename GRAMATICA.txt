/*******************************************************************************
 *
 * PROJETO DE COMPILADOR - ConvCC-2025-1
 *
 * ARQUIVO DE DOCUMENTAÇÃO FINAL DA GRAMÁTICA
 *
 * Grupo: Nicolas, Patricia, Gustavo
 * Professor: Alvaro Junio Pereira Franco
 * Disciplina: INE5426 - Construção de Compiladores
 *
 *******************************************************************************
 *
 * Este arquivo consolida a gramática base da linguagem, as modificações
 * e melhorias implementadas e a gramática final LL(1) fatorada.
 *
 *******************************************************************************/


//==============================================================================
//
//               SEÇÃO 1: GRAMÁTICA BASE (ConvCC-2025-1)
//
//==============================================================================

PROGRAM          ->  [ STATEMENT FUNCLIST ]
FUNCLIST         ->  FUNCDEF [ FUNCLIST ]
FUNCDEF          ->  'def' ident PARAMLIST STATEMENT

PARAMLIST        ->  [ ( 'int' | 'float' | 'string' ) ident [ PARAMLIST ] ]

STATEMENT        ->  VARDECL | ATRIBSTAT | PRINTSTAT | READSTAT | RETURNSTAT | IFSTAT | FORSTAT | STATELIST | 'break' ';'

VARDECL          ->  ( 'int' | 'float' | 'string' ) ident { '[' int_constant ']' }
ATRIBSTAT        ->  LVALUE '=' ( EXPRESSION | ALLOCEXPRESSION | FUNCCALL )

FUNCCALL         ->  ident '(' [ PARAMLISTCALL ] ')'
PARAMLISTCALL    ->  ident [ ',' PARAMLISTCALL ]

PRINTSTAT        ->  'print' EXPRESSION
READSTAT         ->  'read' LVALUE
RETURNSTAT       ->  'return' EXPRESSION

IFSTAT           ->  'if' EXPRESSION STATEMENT [ 'else' STATEMENT ]
FORSTAT          ->  'for' ATRIBSTAT EXPRESSION ATRIBSTAT STATEMENT
STATELIST        ->  '{' STATEMENT { STATEMENT } '}'

ALLOCEXPRESSION  ->  'new' ( 'int' | 'float' | 'string' ) '[' NUMEXPRESSION ']' { '[' NUMEXPRESSION ']' }

EXPRESSION       ->  NUMEXPRESSION [ relop NUMEXPRESSION ]
NUMEXPRESSION    ->  TERM { ( '+' | '-' ) TERM }
TERM             ->  FACTOR { ( '*' | '/' | '%' ) FACTOR }
FACTOR           ->  ident | int_constant | float_constant | string_constant | 'null' | LVALUE | '(' EXPRESSION ')'

LVALUE           ->  ident { '[' EXPRESSION ']' }



//==============================================================================
//
//            SEÇÃO 2: MODIFICAÇÕES E MELHORIAS IMPLEMENTADAS
//
//==============================================================================

A gramática final implementada não apenas segue as especificações da linguagem base (ConvCC-2025-1), mas também incorpora diversas melhorias para torná-la não-ambígua, implementável com um parser LL(1) e mais robusta e poderosa para o programador. As principais modificações são detalhadas a seguir:

1. FATORAÇÃO COMPLETA PARA ANÁLISE LL(1) E REMOÇÃO DE AMBIGUIDADE

A modificação mais fundamental foi a refatoração de toda a gramática para eliminar recursões à esquerda e ambiguidades, um pré-requisito para o analisador sintático preditivo. A gramática do PDF usa notações como `( ... )*` (zero ou mais) e `[ ... ]` (opcional), que são típicas de EBNF. Essas notações escondem recursões à esquerda que são fatais para um analisador LL(1). A gramática implementada introduz novos não-terminais (ex: `NUMEXPRESSIONAUX`, `UNARYEXPRAUX`, `STATELIST'`) para transformar essas recursões em recursões à direita, que podem ser tratadas com sucesso pelo parser preditivo.


2. SINTAXE INEQUÍVOCA PARA CHAMADAS DE FUNÇÃO

Para resolver a ambiguidade entre um acesso a vetor e uma chamada de função, a sintaxe foi alterada de duas formas:

   a) **Inclusão da palavra-chave `call`:** Torna a intenção de chamar uma função explícita e imediatamente reconhecível pelo parser.
   b) **Uso de parênteses externos:** A sintaxe final `call(ident(...))` encapsula toda a chamada.

   - **Gramática Base:** `ident(...)`
   - **Gramática Final:** `call(ident(...))`

   Essa mudança elimina qualquer possibilidade de conflito sintático, como em `minha_var(indice)`, que poderia ser uma chamada de função ou um acesso a vetor em outras linguagens.

3. USO OBRIGATÓRIO DE BLOCOS `{...}` EM ESTRUTURAS DE CONTROLE

Esta é uma melhoria crucial para a robustez da linguagem, eliminando a famosa ambiguidade do "dangling else". 

   - **Gramática Base:** `if EXPRESSION STATEMENT [ else STATEMENT ]`
   - **Gramática Final:** `if (...) { STATELIST } [ else { STATELIST } ]`

   A gramática base permite construções como `if (c1) if (c2) s1; else s2;`, onde não fica claro a qual `if` o `else` pertence. Ao forçar o uso de blocos `{ STATELIST }` para os corpos de `if`, `else` e `for`, a gramática implementada elimina essa ambiguidade, tornando o código mais legível e seguro.

4. SINTAXE ESTRUTURADA PARA `if` e `for`

Para alinhar a linguagem com a sintaxe familiar de C e Java, foi adicionada a obrigatoriedade do uso de parênteses `()` ao redor das seções de controle.

   - **Gramática Base:** `for ATRIBSTAT EXPRESSION ATRIBSTAT ...`
   - **Gramática Final:** `for (ATRIBSTAT; EXPRESSION; ATRIBSTAT) ...`

   Essa mudança não altera a semântica, mas melhora drasticamente a legibilidade e a organização do código, tornando as três partes do `for` (inicialização, condição, incremento) claramente delimitadas.


5. FLEXIBILIZAÇÃO DA ESTRUTURA DO PROGRAMA

A gramática implementada permite uma organização de código mais livre, como ter código executável após as declarações de funções, ou até mesmo um programa sem nenhuma função. A gramática base era restritiva, sugerindo um programa que continha ou `STATEMENT` ou `FUNCLIST`. A versão final permite que o programador declare todas as suas funções e, em seguida, tenha um bloco de código principal, um padrão muito mais comum e prático.

6. FLEXIBILIZAÇÃO DE PARÂMETROS E RETORNOS

   a) **Retorno Vazio:** A gramática base sugere `return EXPRESSION`, o que não permite retornos vazios (`return;`), comuns em procedimentos (funções `void`). A versão implementada permite tanto retornar um valor quanto um retorno vazio, alinhando-se melhor com linguagens como C e Java.

   b) **Passagem de `LVALUE` como Parâmetro:** A gramática base só permitia `ident` como parâmetro em uma chamada de função. A versão final foi aprimorada para aceitar um `LVALUE` completo. Isso torna a linguagem muito mais poderosa, permitindo passar não apenas variáveis simples, mas também elementos de vetores como parâmetros.
      - **Exemplo Possível Agora:** `minha_funcao(meu_vetor[i+1]);`

7. GENERALIZAÇÃO DO ÍNDICE DE VETORES

A gramática base definia o acesso a um vetor como `LVALUE -> ident([NUMEXPRESSION])`. Isso era restritivo, pois o índice só poderia ser uma expressão numérica simples, sem operadores relacionais. A implementação final generalizou essa regra para aceitar uma `EXPRESSION` completa como índice.

   - **Gramática Base:** `ident [NUMEXPRESSION]`
   - **Gramática Final:** `ident [EXPRESSION]`

   Isso permite construções mais complexas e úteis, como `meu_vetor[i > 5]`, cujo resultado (0 ou 1) pode ser usado como um índice válido.


//==============================================================================
//
//        SEÇÃO 3: GRAMÁTICA FINAL IMPLEMENTADA (LL(1) FATORADA)
//
//==============================================================================

PROGRAM         -> FUNCLIST PROGRAM'
PROGRAM         -> STATEMENT PROGRAM'
PROGRAM         -> ε

PROGRAM'        -> PROGRAM 
PROGRAM'        -> ε

FUNCLIST        -> FUNCDEF FUNCLIST'
FUNCLIST'       -> FUNCLIST
FUNCLIST'       -> ε

FUNCDEF         -> 'def' ident '(' PARAMLIST ')' '{' STATELIST '}'

PARAMLIST       -> VARDECL PARAMLIST'
PARAMLIST       -> ε

PARAMLIST'      -> ',' PARAMLIST
PARAMLIST'      -> ε

STATEMENT       -> VARDECL ';'
STATEMENT       -> ATRIBSTAT ';'
STATEMENT       -> PRINTSTAT ';'
STATEMENT       -> READSTAT ';'
STATEMENT       -> RETURNSTAT ';'
STATEMENT       -> IFSTAT
STATEMENT       -> FORSTAT
STATEMENT       -> '{' STATELIST '}'  // Um bloco também é um STATEMENT
STATEMENT       -> 'break' ';'
STATEMENT       -> ';'

VARDECL         -> ('int' | 'float' | 'string') ident INDEX
INDEX           -> '[' int_constant ']' INDEX
INDEX           -> ε

ATRIBSTAT       -> LVALUE '=' ATRIBSTAT'
ATRIBSTAT'      -> EXPRESSION
ATRIBSTAT'      -> ALLOCEXPRESSION
ATRIBSTAT'      -> FUNCCALL

FUNCCALL        -> 'call' '(' ident '(' PARAMLISTCALL ')' ')'

PARAMLISTCALL   -> LVALUE PARAMLISTCALL' 
PARAMLISTCALL   -> ε

PARAMLISTCALL'  -> ',' PARAMLISTCALL
PARAMLISTCALL'  -> ε

PRINTSTAT       -> 'print' EXPRESSION
READSTAT        -> 'read' LVALUE

RETURNSTAT      -> 'return' RETURNSTAT'
RETURNSTAT'     -> EXPRESSION
RETURNSTAT'     -> ε

IFSTAT          -> 'if' '(' EXPRESSION ')' '{' STATELIST '}' IFSTAT' 
IFSTAT'         -> 'else' '{' STATELIST '}'
IFSTAT'         -> ε

FORSTAT         -> 'for' '(' ATRIBSTAT ';' EXPRESSION ';' ATRIBSTAT ')' '{' STATELIST '}'

STATELIST       -> STATEMENT STATELIST'
STATELIST'      -> STATELIST // Simplificação para reusar a regra STATELIST
STATELIST'      -> ε

LVALUE          -> ident ALLOCAUX
ALLOCAUX        -> '[' EXPRESSION ']' ALLOCAUX
ALLOCAUX        -> ε

ALLOCEXPRESSION -> 'new' VARDECL '[' NUMEXPRESSION ']' ALLOCAUX 

EXPRESSION      -> NUMEXPRESSION EXPRESSION'
EXPRESSION'     -> relop NUMEXPRESSION
EXPRESSION'     -> ε

NUMEXPRESSION   -> TERM NUMEXPRESSIONAUX
NUMEXPRESSIONAUX-> '+' TERM NUMEXPRESSIONAUX
NUMEXPRESSIONAUX-> '-' TERM NUMEXPRESSIONAUX
NUMEXPRESSIONAUX-> ε

TERM            -> UNARYEXPR UNARYEXPRAUX
UNARYEXPRAUX    -> '*' UNARYEXPR UNARYEXPRAUX
UNARYEXPRAUX    -> '/' UNARYEXPR UNARYEXPRAUX
UNARYEXPRAUX    -> '%' UNARYEXPR UNARYEXPRAUX
UNARYEXPRAUX    -> ε

UNARYEXPR       -> '+' FACTOR
UNARYEXPR       -> '-' FACTOR
UNARYEXPR       -> FACTOR

FACTOR          -> LVALUE
FACTOR          -> int_constant
FACTOR          -> float_constant
FACTOR          -> string_constant
FACTOR          -> 'null'
FACTOR          -> '(' EXPRESSION ')'