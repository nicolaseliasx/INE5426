// parse_table.rs
use std::collections::HashMap;
use lazy_static::lazy_static;
use crate::parser_stack_item::StackItem;
use crate::syntax_directed_translation::SYNTAX_DIRECTED_TRANSLATION;

lazy_static! {
    pub static ref PARSE_TABLE: HashMap<&'static str, HashMap<&'static str, &'static Vec<StackItem>>> = {
        let mut table = HashMap::new();
        
        // Helper macro para reduzir repetição
        macro_rules! add_entry {
            ($non_term:expr, $term:expr, $key:expr) => {
                table.entry($non_term)
                    .or_insert_with(HashMap::new)
                    .insert($term, SYNTAX_DIRECTED_TRANSLATION.get($key).unwrap());
            };
        }

        // PROGRAM
        add_entry!("PROGRAM", "DEF", "PROGRAM-DEF");
        add_entry!("PROGRAM", "IDENT", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "OPEN_BRACE", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "INT", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "FLOAT", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "STRING", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "SEMICOLON", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "BREAK", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "PRINT", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "READ", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "RETURN", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "IF", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "FOR", "PROGRAM-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM", "$", "PROGRAM-$");
        
        // PROGRAM_TAIL
        add_entry!("PROGRAM'", "IDENT", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "OPEN_BRACE", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "INT", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "FLOAT", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "STRING", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "SEMICOLON", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "BREAK", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "PRINT", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "READ", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "RETURN", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "IF", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "FOR", "PROGRAM'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("PROGRAM'", "$", "PROGRAM'-$");

        // FUNCLIST
        add_entry!("FUNCLIST", "DEF", "FUNCLIST-DEF");
        
        // FUNCLIST_TAIL
        add_entry!("FUNCLIST'", "DEF", "FUNCLIST'-DEF");
        add_entry!("FUNCLIST'", "IDENT", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "OPEN_BRACE", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "INT", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "FLOAT", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "STRING", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "SEMICOLON", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "BREAK", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "PRINT", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "READ", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "RETURN", "FUNCLIST'-IDENT-OPEN_BRACE-INT-Float-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "IF", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "FOR", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("FUNCLIST'", "$", "FUNCLIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");

        // FUNCTION_DEF
        add_entry!("FUNCDEF", "DEF", "FUNCDEF-DEF");
        
        // PARAM_LIST
        add_entry!("PARAMLIST", "CLOSE_PARENTHESIS", "PARAMLIST-CLOSE_PARENTHESIS");
        add_entry!("PARAMLIST", "INT", "PARAMLIST-INT");
        add_entry!("PARAMLIST", "FLOAT", "PARAMLIST-FLOAT");
        add_entry!("PARAMLIST", "STRING", "PARAMLIST-STRING");
        
        // PARAM_LIST_TAIL
        add_entry!("PARAMLIST'", "CLOSE_PARENTHESIS", "PARAMLIST'-CLOSE_PARENTHESIS");
        add_entry!("PARAMLIST'", "COMMA", "PARAMLIST'-COMMA");
        
        // STATEMENT
        add_entry!("STATEMENT", "IDENT", "STATEMENT-IDENT");
        add_entry!("STATEMENT", "OPEN_BRACE", "STATEMENT-OPEN_BRACE");
        add_entry!("STATEMENT", "INT", "STATEMENT-INT-FLOAT-STRING");
        add_entry!("STATEMENT", "FLOAT", "STATEMENT-INT-FLOAT-STRING");
        add_entry!("STATEMENT", "STRING", "STATEMENT-INT-FLOAT-STRING");
        add_entry!("STATEMENT", "SEMICOLON", "STATEMENT-SEMICOLON");
        add_entry!("STATEMENT", "BREAK", "STATEMENT-BREAK");
        add_entry!("STATEMENT", "PRINT", "STATEMENT-PRINT");
        add_entry!("STATEMENT", "READ", "STATEMENT-READ");
        add_entry!("STATEMENT", "RETURN", "STATEMENT-RETURN");
        add_entry!("STATEMENT", "IF", "STATEMENT-IF");
        add_entry!("STATEMENT", "FOR", "STATEMENT-FOR");
        
        // INDEX
        add_entry!("INDEX", "SEMICOLON", "INDEX-SEMICOLON");
        add_entry!("INDEX", "OPEN_BRACKET", "INDEX-OPEN_BRACKET");
        
        // VARIABLE_DECL
        add_entry!("VARDECL", "INT", "VARDECL-INT");
        add_entry!("VARDECL", "FLOAT", "VARDECL-FLOAT");
        add_entry!("VARDECL", "STRING", "VARDECL-STRING");
        
        // ASSIGN_STAT
        add_entry!("ATRIBSTAT", "IDENT", "ATRIBSTAT-IDENT");
        
        // ASSIGN_TAIL
        add_entry!("ATRIBSTAT'", "IDENT", "ATRIBSTAT'-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("ATRIBSTAT'", "OPEN_PARENTHESIS", "ATRIBSTAT'-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("ATRIBSTAT'", "NI", "ATRIBSTAT'-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("ATRIBSTAT'", "PLUS", "ATRIBSTAT'-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("ATRIBSTAT'", "MINUS", "ATRIBSTAT'-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("ATRIBSTAT'", "NPF", "ATRIBSTAT'-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("ATRIBSTAT'", "STRC", "ATRIBSTAT'-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("ATRIBSTAT'", "NULL", "ATRIBSTAT'-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("ATRIBSTAT'", "CALL", "ATRIBSTAT'-CALL");
        add_entry!("ATRIBSTAT'", "NEW", "ATRIBSTAT'-NEW");
        
        // FUNC_CALL
        add_entry!("FUNCCALL", "CALL", "FUNCCALL-CALL");
        
        // PARAM_LIST_CALL
        add_entry!("PARAMLISTCALL", "IDENT", "PARAMLISTCALL-IDENT");
        add_entry!("PARAMLISTCALL", "CLOSE_PARENTHESIS", "PARAMLISTCALL-CLOSE_PARENTHESIS");
        
        // PARAM_LIST_CALL_TAIL
        add_entry!("PARAMLISTCALL'", "CLOSE_PARENTHESIS", "PARAMLISTCALL'-CLOSE_PARENTHESIS");
        add_entry!("PARAMLISTCALL'", "COMMA", "PARAMLISTCALL'-COMMA");
        
        // PRINT_STAT
        add_entry!("PRINTSTAT", "PRINT", "PRINTSTAT-PRINT");
        
        // READ_STAT
        add_entry!("READSTAT", "READ", "READSTAT-READ");
        
        // RETURN_STAT
        add_entry!("RETURNSTAT", "RETURN", "RETURNSTAT-RETURN");
        
        // RETURN_TAIL
        add_entry!("RETURNSTAT'", "IDENT", "RETURNSTAT'-IDENT");
        add_entry!("RETURNSTAT'", "SEMICOLON", "RETURNSTAT'-SEMICOLON");
        
        // IF_STAT
        add_entry!("IFSTAT", "IF", "IFSTAT-IF");
        
        // IF_TAIL
        add_entry!("IFSTAT'", "IDENT", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "OPEN_BRACE", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "CLOSE_BRACE", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "INT", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "FLOAT", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "STRING", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "SEMICOLON", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "BREAK", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "PRINT", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "READ", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "RETURN", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "IF", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "FOR", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "$", "IFSTAT'-IDENT-OPEN_BRACE-CLOSE_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR-$");
        add_entry!("IFSTAT'", "ELSE", "IFSTAT'-ELSE");
        
        // FOR_STAT
        add_entry!("FORSTAT", "FOR", "FORSTAT-FOR");
        
        // STATEMENT_LIST
        add_entry!("STATELIST", "IDENT", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "OPEN_BRACE", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "INT", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "FLOAT", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "STRING", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "SEMICOLON", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "BREAK", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "PRINT", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "READ", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "RETURN", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "IF", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST", "FOR", "STATELIST-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        
        // STATEMENT_LIST_TAIL
        add_entry!("STATELIST'", "IDENT", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "OPEN_BRACE", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "INT", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "FLOAT", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "STRING", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "SEMICOLON", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "BREAK", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "PRINT", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "READ", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "RETURN", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-Read-RETURN-IF-FOR");
        add_entry!("STATELIST'", "IF", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "FOR", "STATELIST'-IDENT-OPEN_BRACE-INT-FLOAT-STRING-SEMICOLON-BREAK-PRINT-READ-RETURN-IF-FOR");
        add_entry!("STATELIST'", "CLOSE_BRACE", "STATELIST'-CLOSE_BRACE");
        
        // ALLOC_AUX
        add_entry!("ALLOCAUX", "CLOSE_PARENTHESIS", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "SEMICOLON", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "CLOSE_BRACKET", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "ASSIGN", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "RELOP", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "PLUS", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "MINUS", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "MULTIPLICATION", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "DIVISION", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "MODULUS", "ALLOCAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-ASSIGN-RELOP-PLUS-MINUS-MULTIPLICATION-DIVISION-MODULUS");
        add_entry!("ALLOCAUX", "OPEN_BRACKET", "ALLOCAUX-OPEN_BRACKET");
        
        // ALLOC_EXPR
        add_entry!("ALLOCEXPRESSION", "NEW", "ALLOCEXPRESSION-NEW");
        
        // ALLOC_EXPR_TAIL
        add_entry!("ALLOCEXPRESSION'", "INT", "ALLOCEXPRESSION'-INT");
        add_entry!("ALLOCEXPRESSION'", "FLOAT", "ALLOCEXPRESSION'-FLOAT");
        add_entry!("ALLOCEXPRESSION'", "STRING", "ALLOCEXPRESSION'-STRING");
        
        // EXPRESSION
        add_entry!("EXPRESSION", "IDENT", "EXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("EXPRESSION", "OPEN_PARENTHESIS", "EXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("EXPRESSION", "NI", "EXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("EXPRESSION", "PLUS", "EXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("EXPRESSION", "MINUS", "EXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("EXPRESSION", "NPF", "EXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("EXPRESSION", "STRC", "EXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("EXPRESSION", "NULL", "EXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        
        // EXPRESSION_TAIL
        add_entry!("EXPRESSION'", "CLOSE_PARENTHESIS", "EXPRESSION'-CLOSE_PARENTHESIS-SEMICOLON");
        add_entry!("EXPRESSION'", "SEMICOLON", "EXPRESSION'-CLOSE_PARENTHESIS-SEMICOLON");
        add_entry!("EXPRESSION'", "RELOP", "EXPRESSION'-RELOP");
        
        // NUM_EXPR_AUX
        add_entry!("NUMEXPRESSIONAUX", "CLOSE_PARENTHESIS", "NUMEXPRESSIONAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP");
        add_entry!("NUMEXPRESSIONAUX", "SEMICOLON", "NUMEXPRESSIONAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP");
        add_entry!("NUMEXPRESSIONAUX", "CLOSE_BRACKET", "NUMEXPRESSIONAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP");
        add_entry!("NUMEXPRESSIONAUX", "RELOP", "NUMEXPRESSIONAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP");
        add_entry!("NUMEXPRESSIONAUX", "PLUS", "NUMEXPRESSIONAUX-PLUS");
        add_entry!("NUMEXPRESSIONAUX", "MINUS", "NUMEXPRESSIONAUX-MINUS");
        
        // NUM_EXPR
        add_entry!("NUMEXPRESSION", "IDENT", "NUMEXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("NUMEXPRESSION", "OPEN_PARENTHESIS", "NUMEXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("NUMEXPRESSION", "NI", "NUMEXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("NUMEXPRESSION", "PLUS", "NUMEXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("NUMEXPRESSION", "MINUS", "NUMEXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("NUMEXPRESSION", "NPF", "NUMEXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("NUMEXPRESSION", "STRC", "NUMEXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("NUMEXPRESSION", "NULL", "NUMEXPRESSION-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        
        // TERM
        add_entry!("TERM", "IDENT", "TERM-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("TERM", "OPEN_PARENTHESIS", "TERM-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("TERM", "NI", "TERM-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("TERM", "PLUS", "TERM-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("TERM", "MINUS", "TERM-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("TERM", "NPF", "TERM-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("TERM", "STRC", "TERM-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        add_entry!("TERM", "NULL", "TERM-IDENT-OPEN_PARENTHESIS-NI-PLUS-MINUS-NPF-STRC-NULL");
        
        // UNARY_EXPR_AUX
        add_entry!("UNARYEXPRAUX", "CLOSE_PARENTHESIS", "UNARYEXPRAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP-PLUS-MINUS");
        add_entry!("UNARYEXPRAUX", "SEMICOLON", "UNARYEXPRAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP-PLUS-MINUS");
        add_entry!("UNARYEXPRAUX", "CLOSE_BRACKET", "UNARYEXPRAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP-PLUS-MINUS");
        add_entry!("UNARYEXPRAUX", "RELOP", "UNARYEXPRAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP-PLUS-MINUS");
        add_entry!("UNARYEXPRAUX", "PLUS", "UNARYEXPRAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP-PLUS-MINUS");
        add_entry!("UNARYEXPRAUX", "MINUS", "UNARYEXPRAUX-CLOSE_PARENTHESIS-SEMICOLON-CLOSE_BRACKET-RELOP-PLUS-MINUS");
        add_entry!("UNARYEXPRAUX", "MULTIPLICATION", "UNARYEXPRAUX-MULTIPLICATION");
        add_entry!("UNARYEXPRAUX", "DIVISION", "UNARYEXPRAUX-DIVISION");
        add_entry!("UNARYEXPRAUX", "MODULUS", "UNARYEXPRAUX-MODULUS");
        
        // UNARY_EXPR
        add_entry!("UNARYEXPR", "IDENT", "UNARYEXPR-IDENT-OPEN_PARENTHESIS-NI-NPF-STRC-NULL");
        add_entry!("UNARYEXPR", "OPEN_PARENTHESIS", "UNARYEXPR-IDENT-OPEN_PARENTHESIS-NI-NPF-STRC-NULL");
        add_entry!("UNARYEXPR", "NI", "UNARYEXPR-IDENT-OPEN_PARENTHESIS-NI-NPF-STRC-NULL");
        add_entry!("UNARYEXPR", "NPF", "UNARYEXPR-IDENT-OPEN_PARENTHESIS-NI-NPF-STRC-NULL");
        add_entry!("UNARYEXPR", "STRC", "UNARYEXPR-IDENT-OPEN_PARENTHESIS-NI-NPF-STRC-NULL");
        add_entry!("UNARYEXPR", "NULL", "UNARYEXPR-IDENT-OPEN_PARENTHESIS-NI-NPF-STRC-NULL");
        add_entry!("UNARYEXPR", "PLUS", "UNARYEXPR-PLUS");
        add_entry!("UNARYEXPR", "MINUS", "UNARYEXPR-MINUS");
        
        // FACTOR
        add_entry!("FACTOR", "IDENT", "FACTOR-IDENT");
        add_entry!("FACTOR", "OPEN_PARENTHESIS", "FACTOR-OPEN_PARENTHESIS");
        add_entry!("FACTOR", "NI", "FACTOR-NI");
        add_entry!("FACTOR", "NPF", "FACTOR-NPF");
        add_entry!("FACTOR", "STRC", "FACTOR-STRC");
        add_entry!("FACTOR", "NULL", "FACTOR-NULL");
        
        // LVALUE
        add_entry!("LVALUE", "IDENT", "LVALUE-IDENT");

        table
    };
}